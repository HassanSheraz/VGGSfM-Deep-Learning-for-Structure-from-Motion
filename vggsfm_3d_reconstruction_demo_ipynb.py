# -*- coding: utf-8 -*-
"""VGGSfM_3D_Reconstruction_Demo.ipynb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10sYIzMuKM9fDy7IJpbE13Og4u8mz7CjK
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/facebookresearch/VGGSfM.git
# %cd VGGSfM

# Install system dependencies
!apt-get update
!apt-get install -y colmap ffmpeg

# Install Python dependencies
!pip install -U pip
!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
!pip install opencv-python hydra-core omegaconf visdom pycolmap kornia einops
!pip install git+https://github.com/cvg/LightGlue.git
!pip install git+https://github.com/facebookresearch/dinov2.git
!pip install pytorch3d -f https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/py3.10_cu118_pyt1110/download.html

# Commented out IPython magic to ensure Python compatibility.
# Step 1: Install exact working versions for torch and xformers
!pip install torch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118
!pip install xformers==0.0.29

# Step 2: Clone dinov2 and PATCH xformers requirement
!rm -rf dinov2
!git clone https://github.com/facebookresearch/dinov2.git
# %cd dinov2

# Patch setup.py to remove strict xformers==0.0.18
!sed -i 's/xformers==0.0.18/xformers>=0.0.18/' setup.py

# Now install dinov2 without errors
!pip install .

# Commented out IPython magic to ensure Python compatibility.
# Go into dinov2 folder
# %cd /content/VGGSfM/dinov2

# Patch setup.py to allow newer xformers version
!sed -i 's/xformers==0.0.18/xformers>=0.0.18/' setup.py

# Now install dinov2 without the strict version error
!pip install .

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/VGGSfM

# Optional but useful if not already linked
!ln -s dinov2 dinov2_local

!git clone https://github.com/cvg/pyceres.git

!apt-get install -y libabsl-dev

!apt-get install -y libeigen3-dev

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/pyceres/ceres-solver/build
!cmake .. -DBUILD_TESTING=OFF
!make -j8
!make install

# Commented out IPython magic to ensure Python compatibility.
# %cd /content
!git clone https://github.com/abseil/abseil-cpp.git
# %cd abseil-cpp
!cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=ON .
!cmake --build build -j8
!cmake --install build

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/pyceres/ceres-solver/build
!cmake .. -DBUILD_TESTING=OFF
!make -j8
!make install

# Commented out IPython magic to ensure Python compatibility.
# Step 1: Install latest Abseil (with logging)
# %cd /content
!git clone --depth=1 https://github.com/abseil/abseil-cpp.git
# %cd abseil-cpp
!cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=ON
!cmake --build build -j8
!cmake --install build

# Commented out IPython magic to ensure Python compatibility.
# Step 2: Rebuild Ceres without tests and examples
# %cd /content/pyceres/ceres-solver
!rm -rf build
!mkdir build && cd build
!cmake .. -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_PREFIX_PATH="/usr/local"
!make -j8
!make install

ls /usr/local/lib/cmake/Ceres

# Commented out IPython magic to ensure Python compatibility.
# Start fresh
# %cd /content
!rm -rf pyceres && mkdir pyceres
# %cd pyceres

# Clone Ceres 2.1.0 (stable, no absl::log requirement)
!git clone -b 2.1.0 https://github.com/ceres-solver/ceres-solver.git

# Create build directory
# %cd ceres-solver
!mkdir build && cd build

# Configure and build
# %cd build
!cmake .. -DBUILD_TESTING=OFF
!make -j8
!make install

ls /usr/local/lib/cmake/Ceres

!mkdir -p /content/ceres_test_project

with open("/content/ceres_test_project/CMakeLists.txt", "w") as f:
    f.write("""\
cmake_minimum_required(VERSION 3.10)
project(CeresExample)

# Find the installed Ceres Solver
find_package(Ceres REQUIRED PATHS /usr/local/lib/cmake/Ceres)

# Create an executable from main.cpp
add_executable(main main.cpp)

# Link the executable with Ceres
target_link_libraries(main PRIVATE ceres)
""")

with open("/content/ceres_test_project/main.cpp", "w") as f:
    f.write("""\
#include "ceres/ceres.h"
#include "glog/logging.h"

// A simple cost functor for curve fitting (y = x^2)
struct CostFunctor {
  template <typename T>
  bool operator()(const T* const x, T* residual) const {
    residual[0] = T(10.0) - x[0] * x[0];  // residual = 10 - x^2
    return true;
  }
};

int main(int argc, char** argv) {
  google::InitGoogleLogging(argv[0]);

  double initial_x = 5.0;
  double x = initial_x;

  // Set up the optimization problem
  ceres::Problem problem;
  problem.AddResidualBlock(
      new ceres::AutoDiffCostFunction<CostFunctor, 1, 1>(new CostFunctor),
      nullptr, &x);

  // Configure solver options
  ceres::Solver::Options options;
  options.linear_solver_type = ceres::DENSE_QR;
  options.minimizer_progress_to_stdout = true;

  // Run the solver
  ceres::Solver::Summary summary;
  ceres::Solve(options, &problem, &summary);

  std::cout << summary.BriefReport() << "\\n";
  std::cout << "Initial x: " << initial_x << " -> Optimized x: " << x << "\\n";

  return 0;
}
""")

# Commented out IPython magic to ensure Python compatibility.
# Step into the test project directory
# %cd /content/ceres_test_project

# Make a build directory
!mkdir -p build
# %cd build

# Run CMake to configure the project
!cmake ..

# Build the project using make
!make

!./main

!ls /content/VGGSfM

!chmod +x /content/VGGSfM/install.sh
!bash /content/VGGSfM/install.sh

!ls /content/VGGSfM/examples

# Uninstall current torchvision
!pip uninstall -y torchvision

# Reinstall compatible version for PyTorch 2.0.1 with CUDA 11.7
!pip install torchvision==0.15.2+cu117 -f https://download.pytorch.org/whl/torch_stable.html

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/VGGSfM

!pip install -e dependency/LightGlue

!find cfgs -name "*.yaml"

!python demo.py --config-path cfgs --config-name demo